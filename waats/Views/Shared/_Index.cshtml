@model waats.ViewModel.WaatsFormVM
@{
    Layout = "~/Views/Shared/_survey_layout.cshtml";
    ViewBag.Title = "Home Page";
    var flag = Model.flag;
}
<style>
    .read-only {
        pointer-events: none; /* Prevents click events */
        color: gray; /* Makes it look disabled */
        cursor: default;
    }
</style>

<div class="mainContentArea">
    <div id="introduction">
        <div class="outerWrapper">
            <div class="innerWrapper">
                <div class="row">
                    <div class="col-md-12">
                        <h4> Introduction </h4>
                        <div class="videoWrapper">
                            @*<div class="video-frame rounded frame-low-vh">
                                    <video id="Intro1" style="width:560px;height:315px">
                                        <source src="~/Media/eng/Intro.mp4" type='video/mp4;'>
                                    </video>
                                    <br />
                                    <i class="fa  fa-play-circle-o myHTMLvideo fw-semibold fa-1x text-dark" id="Intro" style="cursor:pointer">&nbsp;click here to play intro</i>
                                </div>*@
                            <div class="video-container">
                                <video id="introVideo" width="100%" height="100%" controls>
                                    <source src="@Url.Content("~/Media/eng/Intro.mp4")" type="video/mp4">
                                    Your browser does not support the video tag.
                                </video>
                            </div>
                        </div>
                        <div class="actionButton">
                            <button class="btn btn-outline-primary" id="play-btn">
                                <i class="fa-regular fa-circle-play me-2 "></i> Play Intro
                            </button>
                            <button class="btn btn-success " id="introContinue" disabled>
                                Continue <i class="fa-solid fa-arrow-right ms-2"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


   
        <div id="Section02" class="d-none">
            <div class="row">
                <!-- Video Section-->
                <div class="col-md-7 pe-md-0">
                    <div class="outerWrapper top-right-bottom-radius-0">
                        <div class="innerWrapperSection">
                            <h4 id="sectionname"> </h4>
                            <div class="videoWrapper">
                                <div class="video-container">
                                    <video id="introVideo2" width="100%" height="100%" controls>
                                        <source src="@Url.Content("~/Media/eng/Intro.mp4")" type="video/mp4">
                                        Your browser does not support the video tag.
                                    </video>
                                </div>
                            </div>
                            <div class="d-flex justify-content-center pt-4">
                                <button class="btn btn-outline-primary " id="Section02Continue">
                                    <i class="fa-regular fa-circle-play me-2"></i> Play Intro
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-5 ps-md-0">
                    <div class="rightWrapper">
                        <h4> Profile </h4>
                        <div class="tabs-area">
                            <div class="d-flex justify-content-between tabs-links">
                                <ul class="nav nav-tabs" id="wizardTabs" role="tablist">
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link active" id="section1-tab" data-bs-toggle="tab" data-bs-target="#section1" type="button" role="tab" aria-controls="section1" aria-selected="true">Section 01</button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" id="section02-tab" data-bs-toggle="tab" data-bs-target="#section002" type="button" role="tab" aria-controls="section02" aria-selected="false">Section 02</button>
                                    </li>
                                    <li class="nav-item" role="presentation">
                                        <button class="nav-link" id="lastSection-tab" data-bs-toggle="tab" data-bs-target="#lastSection" type="button" role="tab" aria-controls="lastSection" aria-selected="false">Section 03</button>
                                    </li>
                                </ul>
                                <div class="navigate-links">
                                    <a href="#" id="prev-tab"> <i class="fa-regular fa-circle-left me-2"></i></a>
                                    <a href="#" id="next-link"><i class="fa-regular fa-circle-right active"></i> </a>
                                </div>
                            </div>
                            @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", id = "CRForm", @class = "form-horizontal", role = "form" }))
                            {
                                <div class="tab-content" id="wizardTabsContent">
                                    <!-- Introduction -->

                                    <div class="tab-pane fade show active" id="section1" role="tabpanel" aria-labelledby="section1-tab">

                                        <div class="mb-4">
                                            @Html.LabelFor(model => model.Firstname, htmlAttributes: new { @class = "form-label" })
                                            @Html.EditorFor(model => model.Firstname, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(m => m.Firstname) } })
                                            @Html.ValidationMessageFor(model => model.Firstname, "", new { @class = "text-danger" })
                                            @*<label for="firstName" class="form-label">First Name</label>
                        <input type="text" class="form-control" id="firstName" placeholder="First Name">*@
                                        </div>
                                        <div class="mb-4">
                                            @Html.LabelFor(model => model.Surname, htmlAttributes: new { @class = "form-label" })
                                            @Html.EditorFor(model => model.Surname, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(m => m.Surname) } })
                                            @Html.ValidationMessageFor(model => model.Surname, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mb-4">
                                            @Html.LabelFor(model => model.DoB, htmlAttributes: new { @class = "form-label" })
                                            @Html.EditorFor(model => model.DoB, new
                                            {
                                                htmlAttributes = new
                                                {
                                                    @class = "form-control",
                                                    @id = "DoB",  // Ensure there's an id for referencing in JS
                                                    @min = DateTime.Now.AddYears(-100).ToString("yyyy-MM-dd"),
                                                    @max = DateTime.Now.AddDays(0).ToString("yyyy-MM-dd"),
                                                    placeholder = "yyyy/mm/dd",
                                                    onchange = "myFunction('DoB');"
                                                }
                                            })
                                            @Html.ValidationMessageFor(model => model.DoB, "", new { @class = "text-danger" })
                                        </div>

                                        <div class="mb-4">
                                            @Html.LabelFor(model => model.Age, htmlAttributes: new { @class = "form-label" })
                                            @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @class = "form-control", maxlength = "3", placeholder = @Html.DisplayNameFor(m => m.Age), @ReadOnly = "ReadOnly" } })
                                            @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
                                        </div>

                                        <div class="mb-4">
                                            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "form-label" })
                                            @Html.DropDownListFor(model => model.Gender, new List<SelectListItem>
                                                {
                                                new SelectListItem() { Text= "Female", Value = "Female" },
                                                new SelectListItem() { Text= "Male", Value = "Male" },
                                                new SelectListItem() { Text= "Other", Value = "Other" }
                                                }, "Please select", new { @class = "form-select" })
                                            @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mb-4">
                                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "form-label" })
                                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(m => m.Email) } })
                                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mb-4">
                                            @Html.LabelFor(model => model.GPName, htmlAttributes: new { @class = "form-label" })
                                            @Html.EditorFor(model => model.GPName, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(m => m.GPName) } })
                                            @Html.ValidationMessageFor(model => model.GPName, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mb-4">
                                            @Html.LabelFor(model => model.PracticeName, htmlAttributes: new { @class = "form-label" })
                                            @Html.EditorFor(model => model.PracticeName, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(m => m.PracticeName) } })
                                            @Html.ValidationMessageFor(model => model.PracticeName, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mb-4">
                                            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "form-label" })
                                            @Html.TextAreaFor(model => model.Address, new { @class = "form-control", @rows = "3", @maxlength = "4000", placeholder = @Html.DisplayNameFor(m => m.Address) })
                                            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mb-4">
                                            @Html.LabelFor(model => model.Postcode, htmlAttributes: new { @class = "form-label" })
                                            <small class="text-danger">Only accept capital letters</small>
                                            @Html.EditorFor(model => model.Postcode, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(m => m.Postcode) } })
                                            @Html.ValidationMessageFor(model => model.Postcode, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <!-- Section 02 -->
                                    <div class="tab-pane fade" id="section002" role="tabpanel" aria-labelledby="section02-tab">

                                        <div class="mb-4">
                                            @Html.LabelFor(model => model.HistoryofMentalIllness, htmlAttributes: new { @class = "form-label" })
                                            @Html.TextAreaFor(model => model.HistoryofMentalIllness, new { @class = "form-control", @rows = "3", @maxlength = "1000", placeholder = @Html.DisplayNameFor(m => m.HistoryofMentalIllness) })
                                            @Html.ValidationMessageFor(model => model.HistoryofMentalIllness, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mb-4">
                                            @Html.LabelFor(model => model.ReferredtoMentalHealth, htmlAttributes: new { @class = "form-label" })
                                            @Html.TextAreaFor(model => model.ReferredtoMentalHealth, new { @class = "form-control", @rows = "3", @maxlength = "1000", placeholder = @Html.DisplayNameFor(m => m.HistoryofMentalIllness) })
                                            @Html.ValidationMessageFor(model => model.ReferredtoMentalHealth, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mb-4">
                                            @Html.LabelFor(model => model.HaveYouEverHadAnyThoughtsorMadeAttemptstoHarmYourself, htmlAttributes: new { @class = "form-label" })
                                            @Html.DropDownListFor(model => model.HaveYouEverHadAnyThoughtsorMadeAttemptstoHarmYourself, new List<SelectListItem>
                                                {
                                                new SelectListItem() { Text= "No", Value = "No" },
                                                new SelectListItem() { Text= "Yes", Value = "Yes" }
                                                }, "Please select Yes/No", new { @class = "form-select" })
                                            @Html.ValidationMessageFor(model => model.HaveYouEverHadAnyThoughtsorMadeAttemptstoHarmYourself, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mb-4">
                                            @Html.LabelFor(model => model.HaveYouCurrentlyorrecentlyAnyThoughtsorMadeAttemptstoHarmYourself, htmlAttributes: new { @class = "form-label" })
                                            @Html.DropDownListFor(model => model.HaveYouCurrentlyorrecentlyAnyThoughtsorMadeAttemptstoHarmYourself, new List<SelectListItem>
                                                {
                                                new SelectListItem() { Text= "No", Value = "No" },
                                                new SelectListItem() { Text= "Yes", Value = "Yes" }
                                                }, "Please select Yes/No", new { @class = "form-select" })
                                            @Html.ValidationMessageFor(model => model.HaveYouCurrentlyorrecentlyAnyThoughtsorMadeAttemptstoHarmYourself, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mb-4">
                                            @Html.LabelFor(model => model.HaveYouCurrentlyorrecentlyAnyThoughtsorMadeAttemptstoHarmAnyoneElse, htmlAttributes: new { @class = "form-label" })
                                            @Html.DropDownListFor(model => model.HaveYouCurrentlyorrecentlyAnyThoughtsorMadeAttemptstoHarmAnyoneElse, new List<SelectListItem>
                                                {
                                                new SelectListItem() { Text= "No", Value = "No" },
                                                new SelectListItem() { Text= "Yes", Value = "Yes" }
                                                }, "Please select Yes/No", new { @class = "form-select" })
                                            @Html.ValidationMessageFor(model => model.HaveYouCurrentlyorrecentlyAnyThoughtsorMadeAttemptstoHarmAnyoneElse, "", new { @class = "text-danger" })
                                        </div>

                                    </div>

                                    <!-- Last Section -->
                                    <div class="tab-pane fade" id="lastSection" role="tabpanel" aria-labelledby="lastSection-tab">

                                        <div class="mb-4">
                                            <div class="d-flex align-items-center ">
                                                <p>1.</p>
                                                <h6 class="card-title ms-2">
                                                    @Html.LabelFor(model => model.CompleteProjects, htmlAttributes: new { @class = "form-label" })

                                                </h6>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.CompleteProjects, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mb-4">
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.CompleteProjects, "Never", new { @class = "form-check-input", @id = "inlineRadioCP1", @checked = (Model.CompleteProjects != null && Model.CompleteProjects == "Never") ? "checked" : null })
                                                @Html.LabelFor(model => model.CompleteProjects, "Never", new { @class = "form-check-label", @for = "inlineRadioCP1" })


                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.CompleteProjects, "Occasionally/Sometimes", new { @class = "form-check-input", @id = "inlineRadioCP2", @checked = (Model.CompleteProjects != null && Model.CompleteProjects == "Occasionally/Sometimes") ? "checked" : null })
                                                @Html.LabelFor(model => model.CompleteProjects, "Occasionally/Sometimes", new { @class = "form-check-label", @for = "inlineRadioCP2" })

                                            </div>

                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.CompleteProjects, "Often", new { @class = "form-check-input", @id = "inlineRadioCP3", @checked = (Model.CompleteProjects != null && Model.CompleteProjects == "Often") ? "checked" : null })
                                                @Html.LabelFor(model => model.CompleteProjects, "Often", new { @class = "form-check-label", @for = "inlineRadioCP3" })

                                            </div>

                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.CompleteProjects, "Always", new { @class = "form-check-input", @id = "inlineRadioCP4", @checked = (Model.CompleteProjects != null && Model.CompleteProjects == "Always") ? "checked" : null })
                                                @Html.LabelFor(model => model.CompleteProjects, "Always", new { @class = "form-check-label", @for = "inlineRadioCP4" })
                                            </div>
                                        </div>


                                        <div class="mb-4">
                                            <div class="d-flex align-items-center ">
                                                <p>2.</p>
                                                <h6 class="card-title ms-2">
                                                    @Html.LabelFor(model => model.RequiresOrganization, htmlAttributes: new { @class = "form-label" })

                                                </h6>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.RequiresOrganization, "", new { @class = "text-danger" })
                                        </div>

                                        <div class="mb-4">
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.RequiresOrganization, "Never", new { @class = "form-check-input", @id = "inlineRadioRO1", @checked = (Model.RequiresOrganization != null && Model.RequiresOrganization == "Never") ? "checked" : null })
                                                @Html.LabelFor(model => model.RequiresOrganization, "Never", new { @class = "form-check-label", @for = "inlineRadioRO1" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.RequiresOrganization, "Occasionally/Sometimes", new { @class = "form-check-input", @id = "inlineRadioRO2", @checked = (Model.RequiresOrganization != null && Model.RequiresOrganization == "Occasionally/Sometimes") ? "checked" : null })
                                                @Html.LabelFor(model => model.RequiresOrganization, "Occasionally/Sometimes", new { @class = "form-check-label", @for = "inlineRadioRO2" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.RequiresOrganization, "Often", new { @class = "form-check-input", @id = "inlineRadioRO3", @checked = (Model.RequiresOrganization != null && Model.RequiresOrganization == "Often") ? "checked" : null })
                                                @Html.LabelFor(model => model.RequiresOrganization, "Often", new { @class = "form-check-label", @for = "inlineRadioRO3" })
                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.RequiresOrganization, "Always", new { @class = "form-check-input", @id = "inlineRadioRO4", @checked = (Model.RequiresOrganization != null && Model.RequiresOrganization == "Always") ? "checked" : null })
                                                @Html.LabelFor(model => model.RequiresOrganization, "Always", new { @class = "form-check-label", @for = "inlineRadioRO4" })
                                            </div>
                                        </div>

                                        <div class="mb-4">
                                            <div class="d-flex align-items-center ">
                                                <p class="m-0">3.</p>
                                                <h6 class="card-title ms-2">
                                                    @Html.LabelFor(model => model.keepAppointments, htmlAttributes: new { @class = "form-label" })

                                                </h6>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.keepAppointments, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mb-4">
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.keepAppointments, "Never", new { @class = "form-check-input", @id = "inlineRadioKP1", @checked = (Model.keepAppointments != null && Model.keepAppointments == "Never") ? "checked" : null })
                                                @Html.LabelFor(model => model.keepAppointments, "Never", new { @class = "form-check-label", @for = "inlineRadioKP1" })
                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.keepAppointments, "Occasionally/Sometimes", new { @class = "form-check-input", @id = "inlineRadioKP2", @checked = (Model.keepAppointments != null && Model.keepAppointments == "Occasionally/Sometimes") ? "checked" : null })
                                                @Html.LabelFor(model => model.keepAppointments, "Occasionally/Sometimes", new { @class = "form-check-label", @for = "inlineRadioKP2" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.keepAppointments, "Often", new { @class = "form-check-input", @id = "inlineRadioKP3", @checked = (Model.keepAppointments != null && Model.keepAppointments == "Often") ? "checked" : null })
                                                @Html.LabelFor(model => model.keepAppointments, "Often", new { @class = "form-check-label", @for = "inlineRadioKP3" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.keepAppointments, "Always", new { @class = "form-check-input", @id = "inlineRadioKP3", @checked = (Model.keepAppointments != null && Model.keepAppointments == "Always") ? "checked" : null })
                                                @Html.LabelFor(model => model.keepAppointments, "Always", new { @class = "form-check-label", @for = "inlineRadioKP3" })

                                            </div>
                                        </div>

                                        <div class="mb-4">
                                            <div class="d-flex align-items-center ">
                                                <p>4.</p>
                                                <h6 class="card-title ms-2">
                                                    @Html.LabelFor(model => model.StartTasksOnTime, htmlAttributes: new { @class = "form-label" })

                                                </h6>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.StartTasksOnTime, "", new { @class = "text-danger" })
                                        </div>

                                        <div class="mb-4">
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.StartTasksOnTime, "Never", new { @class = "form-check-input", @id = "inlineRadioST1", @checked = (Model.StartTasksOnTime != null && Model.StartTasksOnTime == "Never") ? "checked" : null })
                                                @Html.LabelFor(model => model.StartTasksOnTime, "Never", new { @class = "form-check-label", @for = "inlineRadioST1" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.StartTasksOnTime, "Occasionally/Sometimes", new { @class = "form-check-input", @id = "inlineRadioST2", @checked = (Model.StartTasksOnTime != null && Model.StartTasksOnTime == "Occasionally/Sometimes") ? "checked" : null })
                                                @Html.LabelFor(model => model.StartTasksOnTime, "Occasionally/Sometimes", new { @class = "form-check-label", @for = "inlineRadioST2" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.StartTasksOnTime, "Often", new { @class = "form-check-input", @id = "inlineRadioST3", @checked = (Model.StartTasksOnTime != null && Model.StartTasksOnTime == "Often") ? "checked" : null })
                                                @Html.LabelFor(model => model.StartTasksOnTime, "Often", new { @class = "form-check-label", @for = "inlineRadioST3" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.StartTasksOnTime, "Always", new { @class = "form-check-input", @id = "inlineRadioST4", @checked = (Model.StartTasksOnTime != null && Model.StartTasksOnTime == "Always") ? "checked" : null })
                                                @Html.LabelFor(model => model.StartTasksOnTime, "Always", new { @class = "form-check-label", @for = "inlineRadioST4" })

                                            </div>
                                        </div>
                                        <div class="mb-4">
                                            <div class="d-flex align-items-center ">
                                                <p class="m-0">5.</p>
                                                <h6 class="card-title ms-2">
                                                    @Html.LabelFor(model => model.FidgetAndSquirm, htmlAttributes: new { @class = "form-label" })

                                                </h6>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.FidgetAndSquirm, "", new { @class = "text-danger" })
                                        </div>

                                        <div class="mb-4">
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.FidgetAndSquirm, "Never", new { @class = "form-check-input", @id = "inlineRadioFS1", @checked = (Model.FidgetAndSquirm != null && Model.FidgetAndSquirm == "Never") ? "checked" : null })
                                                @Html.LabelFor(model => model.FidgetAndSquirm, "Never", new { @class = "form-check-label", @for = "inlineRadioFS1" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.FidgetAndSquirm, "Occasionally/Sometimes", new { @class = "form-check-input", @id = "inlineRadioFS2", @checked = (Model.FidgetAndSquirm != null && Model.FidgetAndSquirm == "Occasionally/Sometimes") ? "checked" : null })
                                                @Html.LabelFor(model => model.FidgetAndSquirm, "Occasionally/Sometimes", new { @class = "form-check-label", @for = "inlineRadioFS2" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.FidgetAndSquirm, "Often", new { @class = "form-check-input", @id = "inlineRadioFS3", @checked = (Model.FidgetAndSquirm != null && Model.FidgetAndSquirm == "Often") ? "checked" : null })
                                                @Html.LabelFor(model => model.FidgetAndSquirm, "Often", new { @class = "form-check-label", @for = "inlineRadioFS3" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.FidgetAndSquirm, "Always", new { @class = "form-check-input", @id = "inlineRadioFS4", @checked = (Model.FidgetAndSquirm != null && Model.FidgetAndSquirm == "Always") ? "checked" : null })
                                                @Html.LabelFor(model => model.FidgetAndSquirm, "Always", new { @class = "form-check-label", @for = "inlineRadioFS4" })

                                            </div>
                                        </div>
                                        <div class="mb-4">
                                            <div class="d-flex align-items-center ">
                                                <p>6.</p>
                                                <h6 class="card-title ms-2">
                                                    @Html.LabelFor(model => model.OverlyActiveAndCompelled, htmlAttributes: new { @class = "form-label" })

                                                </h6>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.OverlyActiveAndCompelled, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mb-4">
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.OverlyActiveAndCompelled, "Never", new { @class = "form-check-input", @id = "inlineRadioOC1", @checked = (Model.OverlyActiveAndCompelled == "Never") ? "checked" : null })
                                                @Html.LabelFor(model => model.OverlyActiveAndCompelled, "Never", new { @class = "form-check-label", @for = "inlineRadioOC1" })
                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.OverlyActiveAndCompelled, "Occasionally/Sometimes", new { @class = "form-check-input", @id = "inlineRadioOC2", @checked = (Model.OverlyActiveAndCompelled == "Occasionally/Sometimes") ? "checked" : null })
                                                @Html.LabelFor(model => model.OverlyActiveAndCompelled, "Occasionally/Sometimes", new { @class = "form-check-label", @for = "inlineRadioOC2" })
                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.OverlyActiveAndCompelled, "Often", new { @class = "form-check-input", @id = "inlineRadioOC3", @checked = (Model.OverlyActiveAndCompelled == "Often") ? "checked" : null })
                                                @Html.LabelFor(model => model.OverlyActiveAndCompelled, "Often", new { @class = "form-check-label", @for = "inlineRadioOC3" })
                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.OverlyActiveAndCompelled, "Always", new { @class = "form-check-input", @id = "inlineRadioOC4", @checked = (Model.OverlyActiveAndCompelled == "Always") ? "checked" : null })
                                                @Html.LabelFor(model => model.OverlyActiveAndCompelled, "Always", new { @class = "form-check-label", @for = "inlineRadioOC4" })
                                            </div>
                                        </div>

                                        <div class="mb-4">
                                            <div class="d-flex align-items-center ">
                                                <p class="m-0">7.</p>
                                                <h6 class="card-title ms-2">
                                                    @Html.LabelFor(model => model.MakeCarelessMistakes, htmlAttributes: new { @class = "form-label" })

                                                </h6>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.MakeCarelessMistakes, "", new { @class = "text-danger" })
                                        </div>


                                        <div class="mb-4">
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.MakeCarelessMistakes, "Never", new { @class = "form-check-input", @id = "inlineRadioMC1", @checked = (Model.MakeCarelessMistakes != null && Model.MakeCarelessMistakes == "Never") ? "checked" : null })
                                                @Html.LabelFor(model => model.MakeCarelessMistakes, "Never", new { @class = "form-check-label", @for = "inlineRadioMC1" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.MakeCarelessMistakes, "Occasionally/Sometimes", new { @class = "form-check-input", @id = "inlineRadioMC2", @checked = (Model.MakeCarelessMistakes != null && Model.MakeCarelessMistakes == "Occasionally/Sometimes") ? "checked" : null })
                                                @Html.LabelFor(model => model.MakeCarelessMistakes, "Occasionally/Sometimes", new { @class = "form-check-label", @for = "inlineRadioMC2" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.MakeCarelessMistakes, "Often", new { @class = "form-check-input", @id = "inlineRadioMC3", @checked = (Model.MakeCarelessMistakes != null && Model.MakeCarelessMistakes == "Often") ? "checked" : null })
                                                @Html.LabelFor(model => model.MakeCarelessMistakes, "Often", new { @class = "form-check-label", @for = "inlineRadioMC3" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.MakeCarelessMistakes, "Always", new { @class = "form-check-input", @id = "inlineRadioMC4", @checked = (Model.MakeCarelessMistakes != null && Model.MakeCarelessMistakes == "Always") ? "checked" : null })
                                                @Html.LabelFor(model => model.MakeCarelessMistakes, "Always", new { @class = "form-check-label", @for = "inlineRadioMC4" })

                                            </div>
                                        </div>

                                        <div class="mb-4">
                                            <div class="d-flex align-items-center ">
                                                <p>8.</p>
                                                <h6 class="card-title ms-2">
                                                    @Html.LabelFor(model => model.DifficultyKeepingMyAttention, htmlAttributes: new { @class = "form-label" })

                                                </h6>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.DifficultyKeepingMyAttention, "", new { @class = "text-danger" })
                                        </div>

                                        <div class="mb-4">
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.DifficultyKeepingMyAttention, "Never", new { @class = "form-check-input", @id = "inlineRadioDK1", @checked = (Model.DifficultyKeepingMyAttention != null && Model.DifficultyKeepingMyAttention == "Never") ? "checked" : null })
                                                @Html.LabelFor(model => model.DifficultyKeepingMyAttention, "Never", new { @class = "form-check-label", @for = "inlineRadioDK1" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.DifficultyKeepingMyAttention, "Occasionally/Sometimes", new { @class = "form-check-input", @id = "inlineRadioDK2", @checked = (Model.DifficultyKeepingMyAttention != null && Model.DifficultyKeepingMyAttention == "Occasionally/Sometimes") ? "checked" : null })
                                                @Html.LabelFor(model => model.DifficultyKeepingMyAttention, "Occasionally/Sometimes", new { @class = "form-check-label", @for = "inlineRadioDK2" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.DifficultyKeepingMyAttention, "Often", new { @class = "form-check-input", @id = "inlineRadioDK3", @checked = (Model.DifficultyKeepingMyAttention != null && Model.DifficultyKeepingMyAttention == "Often") ? "checked" : null })
                                                @Html.LabelFor(model => model.DifficultyKeepingMyAttention, "Often", new { @class = "form-check-label", @for = "inlineRadioDK3" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.DifficultyKeepingMyAttention, "Always", new { @class = "form-check-input", @id = "inlineRadioDK4", @checked = (Model.DifficultyKeepingMyAttention != null && Model.DifficultyKeepingMyAttention == "Always") ? "checked" : null })
                                                @Html.LabelFor(model => model.DifficultyKeepingMyAttention, "Always", new { @class = "form-check-label", @for = "inlineRadioDK4" })

                                            </div>
                                        </div>
                                        <div class="mb-4">
                                            <div class="d-flex align-items-center ">
                                                <p>9.</p>
                                                <h6 class="card-title ms-2">
                                                    @Html.LabelFor(model => model.DifficultyConcentrating, htmlAttributes: new { @class = "form-label" })

                                                </h6>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.DifficultyConcentrating, "", new { @class = "text-danger" })
                                        </div>

                                        <div class="mb-4">
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.DifficultyConcentrating, "Never", new { @class = "form-check-input", @id = "inlineRadioDC1", @checked = (Model.DifficultyConcentrating != null && Model.DifficultyConcentrating == "Never") ? "checked" : null })
                                                @Html.LabelFor(model => model.DifficultyConcentrating, "Never", new { @class = "form-check-label", @for = "inlineRadioDC1" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.DifficultyConcentrating, "Occasionally/Sometimes", new { @class = "form-check-input", @id = "inlineRadioDC2", @checked = (Model.DifficultyConcentrating != null && Model.DifficultyConcentrating == "Occasionally/Sometimes") ? "checked" : null })
                                                @Html.LabelFor(model => model.DifficultyConcentrating, "Occasionally/Sometimes", new { @class = "form-check-label", @for = "inlineRadioDC2" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.DifficultyConcentrating, "Often", new { @class = "form-check-input", @id = "inlineRadioDC3", @checked = (Model.DifficultyConcentrating != null && Model.DifficultyConcentrating == "Often") ? "checked" : null })
                                                @Html.LabelFor(model => model.DifficultyConcentrating, "Often", new { @class = "form-check-label", @for = "inlineRadioDC3" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.DifficultyConcentrating, "Always", new { @class = "form-check-input", @id = "inlineRadioDC4", @checked = (Model.DifficultyConcentrating != null && Model.DifficultyConcentrating == "Always") ? "checked" : null })
                                                @Html.LabelFor(model => model.DifficultyConcentrating, "Always", new { @class = "form-check-label", @for = "inlineRadioDC4" })

                                            </div>
                                        </div>

                                        <div class="mb-4">
                                            <div class="d-flex align-items-center ">
                                                <p class="m-0">10.</p>
                                                <h6 class="card-title ms-2">
                                                    @Html.LabelFor(model => model.DifficultyFinding, htmlAttributes: new { @class = "form-label" })

                                                </h6>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.DifficultyFinding, "", new { @class = "text-danger" })
                                        </div>

                                        <div class="mb-4">
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.DifficultyFinding, "Never", new { @class = "form-check-input", @id = "inlineRadioDF1", @checked = (Model.DifficultyFinding != null && Model.DifficultyFinding == "Never") ? "checked" : null })
                                                @Html.LabelFor(model => model.DifficultyFinding, "Never", new { @class = "form-check-label", @for = "inlineRadioDF1" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.DifficultyFinding, "Occasionally/Sometimes", new { @class = "form-check-input", @id = "inlineRadioDF2", @checked = (Model.DifficultyFinding != null && Model.DifficultyFinding == "Occasionally/Sometimes") ? "checked" : null })
                                                @Html.LabelFor(model => model.DifficultyFinding, "Occasionally/Sometimes", new { @class = "form-check-label", @for = "inlineRadioDF2" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.DifficultyFinding, "Often", new { @class = "form-check-input", @id = "inlineRadioDF3", @checked = (Model.DifficultyFinding != null && Model.DifficultyFinding == "Often") ? "checked" : null })
                                                @Html.LabelFor(model => model.DifficultyFinding, "Often", new { @class = "form-check-label", @for = "inlineRadioDF3" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.DifficultyFinding, "Always", new { @class = "form-check-input", @id = "inlineRadioDF4", @checked = (Model.DifficultyFinding != null && Model.DifficultyFinding == "Always") ? "checked" : null })
                                                @Html.LabelFor(model => model.DifficultyFinding, "Always", new { @class = "form-check-label", @for = "inlineRadioDF4" })

                                            </div>
                                        </div>
                                        <div class="mb-4">
                                            <div class="d-flex align-items-center ">
                                                <p>11.</p>
                                                <h6 class="card-title ms-2">
                                                    @Html.LabelFor(model => model.EasilyDistracted, htmlAttributes: new { @class = "form-label" })

                                                </h6>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.EasilyDistracted, "", new { @class = "text-danger" })
                                        </div>

                                        <div class="mb-4">
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.EasilyDistracted, "Never", new { @class = "form-check-input", @id = "inlineRadioED1", @checked = (Model.EasilyDistracted != null && Model.EasilyDistracted == "Never") ? "checked" : null })
                                                @Html.LabelFor(model => model.EasilyDistracted, "Never", new { @class = "form-check-label", @for = "inlineRadioED1" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.EasilyDistracted, "Occasionally/Sometimes", new { @class = "form-check-input", @id = "inlineRadioED2", @checked = (Model.EasilyDistracted != null && Model.EasilyDistracted == "Occasionally/Sometimes") ? "checked" : null })
                                                @Html.LabelFor(model => model.EasilyDistracted, "Occasionally/Sometimes", new { @class = "form-check-label", @for = "inlineRadioED2" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.EasilyDistracted, "Often", new { @class = "form-check-input", @id = "inlineRadioED3", @checked = (Model.EasilyDistracted != null && Model.EasilyDistracted == "Often") ? "checked" : null })
                                                @Html.LabelFor(model => model.EasilyDistracted, "Often", new { @class = "form-check-label", @for = "inlineRadioED3" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.EasilyDistracted, "Always", new { @class = "form-check-input", @id = "inlineRadioED4", @checked = (Model.EasilyDistracted != null && Model.EasilyDistracted == "Always") ? "checked" : null })
                                                @Html.LabelFor(model => model.EasilyDistracted, "Always", new { @class = "form-check-label", @for = "inlineRadioED4" })

                                            </div>
                                        </div>
                                        <div class="mb-4">
                                            <div class="d-flex align-items-center ">
                                                <p>12.</p>
                                                <h6 class="card-title ms-2">
                                                    @Html.LabelFor(model => model.LeaveMySeatInMeetings, htmlAttributes: new { @class = "form-label" })

                                                </h6>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.LeaveMySeatInMeetings, "", new { @class = "text-danger" })
                                        </div>

                                        <div class="mb-4">
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.LeaveMySeatInMeetings, "Never", new { @class = "form-check-input", @id = "inlineRadioLM1", @checked = (Model.LeaveMySeatInMeetings != null && Model.LeaveMySeatInMeetings == "Never") ? "checked" : null })
                                                @Html.LabelFor(model => model.LeaveMySeatInMeetings, "Never", new { @class = "form-check-label", @for = "inlineRadioLM1" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.LeaveMySeatInMeetings, "Occasionally/Sometimes", new { @class = "form-check-input", @id = "inlineRadioLM2", @checked = (Model.LeaveMySeatInMeetings != null && Model.LeaveMySeatInMeetings == "Occasionally/Sometimes") ? "checked" : null })
                                                @Html.LabelFor(model => model.LeaveMySeatInMeetings, "Occasionally/Sometimes", new { @class = "form-check-label", @for = "inlineRadioLM2" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.LeaveMySeatInMeetings, "Often", new { @class = "form-check-input", @id = "inlineRadioLM3", @checked = (Model.LeaveMySeatInMeetings != null && Model.LeaveMySeatInMeetings == "Often") ? "checked" : null })
                                                @Html.LabelFor(model => model.LeaveMySeatInMeetings, "Often", new { @class = "form-check-label", @for = "inlineRadioLM3" })


                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.LeaveMySeatInMeetings, "Always", new { @class = "form-check-input", @id = "inlineRadioLM4", @checked = (Model.LeaveMySeatInMeetings != null && Model.LeaveMySeatInMeetings == "Always") ? "checked" : null })
                                                @Html.LabelFor(model => model.LeaveMySeatInMeetings, "Always", new { @class = "form-check-label", @for = "inlineRadioLM4" })

                                            </div>
                                        </div>
                                        <div class="mb-4">
                                            <div class="d-flex align-items-center ">
                                                <p>13.</p>
                                                <h6 class="card-title ms-2">
                                                    @Html.LabelFor(model => model.DifficultyRelaxingOrUnwinding, htmlAttributes: new { @class = "form-label" })

                                                </h6>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.DifficultyRelaxingOrUnwinding, "", new { @class = "text-danger" })
                                        </div>

                                        <div class="mb-4">
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.DifficultyRelaxingOrUnwinding, "Never", new { @class = "form-check-input", @id = "inlineRadioDR1", @checked = (Model.DifficultyRelaxingOrUnwinding != null && Model.DifficultyRelaxingOrUnwinding == "Never") ? "checked" : null })
                                                @Html.LabelFor(model => model.DifficultyRelaxingOrUnwinding, "Never", new { @class = "form-check-label", @for = "inlineRadioDR1" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.DifficultyRelaxingOrUnwinding, "Occasionally/Sometimes", new { @class = "form-check-input", @id = "inlineRadioDR2", @checked = (Model.DifficultyRelaxingOrUnwinding != null && Model.DifficultyRelaxingOrUnwinding == "Occasionally/Sometimes") ? "checked" : null })
                                                @Html.LabelFor(model => model.DifficultyRelaxingOrUnwinding, "Occasionally/Sometimes", new { @class = "form-check-label", @for = "inlineRadioDR2" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.DifficultyRelaxingOrUnwinding, "Often", new { @class = "form-check-input", @id = "inlineRadioDR3", @checked = (Model.DifficultyRelaxingOrUnwinding != null && Model.DifficultyRelaxingOrUnwinding == "Often") ? "checked" : null })
                                                @Html.LabelFor(model => model.DifficultyRelaxingOrUnwinding, "Often", new { @class = "form-check-label", @for = "inlineRadioDR3" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.DifficultyRelaxingOrUnwinding, "Always", new { @class = "form-check-input", @id = "inlineRadioDR4", @checked = (Model.DifficultyRelaxingOrUnwinding != null && Model.DifficultyRelaxingOrUnwinding == "Always") ? "checked" : null })
                                                @Html.LabelFor(model => model.DifficultyRelaxingOrUnwinding, "Always", new { @class = "form-check-label", @for = "inlineRadioDR4" })

                                            </div>
                                        </div>
                                        <div class="mb-4">
                                            <div class="d-flex align-items-center ">
                                                <p>14.</p>
                                                <h6 class="card-title ms-2">
                                                    @Html.LabelFor(model => model.TalkingTooMuch, htmlAttributes: new { @class = "form-label" })

                                                </h6>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.TalkingTooMuch, "", new { @class = "text-danger" })
                                        </div>

                                        <div class="mb-4">
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.TalkingTooMuch, "Never", new { @class = "form-check-input", @id = "inlineRadioTM1", @checked = (Model.TalkingTooMuch != null && Model.TalkingTooMuch == "Never") ? "checked" : null })
                                                @Html.LabelFor(model => model.TalkingTooMuch, "Never", new { @class = "form-check-label", @for = "inlineRadioTM1" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.TalkingTooMuch, "Occasionally/Sometimes", new { @class = "form-check-input", @id = "inlineRadioTM2", @checked = (Model.TalkingTooMuch != null && Model.TalkingTooMuch == "Occasionally/Sometimes") ? "checked" : null })
                                                @Html.LabelFor(model => model.TalkingTooMuch, "Occasionally/Sometimes", new { @class = "form-check-label", @for = "inlineRadioTM2" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.TalkingTooMuch, "Often", new { @class = "form-check-input", @id = "inlineRadioTM3", @checked = (Model.TalkingTooMuch != null && Model.TalkingTooMuch == "Often") ? "checked" : null })
                                                @Html.LabelFor(model => model.TalkingTooMuch, "Often", new { @class = "form-check-label", @for = "inlineRadioTM3" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.TalkingTooMuch, "Always", new { @class = "form-check-input", @id = "inlineRadioTM4", @checked = (Model.TalkingTooMuch != null && Model.TalkingTooMuch == "Always") ? "checked" : null })
                                                @Html.LabelFor(model => model.TalkingTooMuch, "Always", new { @class = "form-check-label", @for = "inlineRadioTM4" })

                                            </div>
                                        </div>
                                        <div class="mb-4">
                                            <div class="d-flex align-items-center ">
                                                <p>15.</p>
                                                <h6 class="card-title ms-2">
                                                    @Html.LabelFor(model => model.FinishingTheSentences, htmlAttributes: new { @class = "form-label" })

                                                </h6>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.FinishingTheSentences, "", new { @class = "text-danger" })
                                        </div>

                                        <div class="mb-4">
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.FinishingTheSentences, "Never", new { @class = "form-check-input", @id = "inlineRadioFT1", @checked = (Model.FinishingTheSentences != null && Model.FinishingTheSentences == "Never") ? "checked" : null })
                                                @Html.LabelFor(model => model.FinishingTheSentences, "Never", new { @class = "form-check-label", @for = "inlineRadioFT1" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.FinishingTheSentences, "Occasionally/Sometimes", new { @class = "form-check-input", @id = "inlineRadioFT2", @checked = (Model.FinishingTheSentences != null && Model.FinishingTheSentences == "Occasionally/Sometimes") ? "checked" : null })
                                                @Html.LabelFor(model => model.FinishingTheSentences, "Occasionally/Sometimes", new { @class = "form-check-label", @for = "inlineRadioFT2" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.FinishingTheSentences, "Often", new { @class = "form-check-input", @id = "inlineRadioFT3", @checked = (Model.FinishingTheSentences != null && Model.FinishingTheSentences == "Often") ? "checked" : null })
                                                @Html.LabelFor(model => model.FinishingTheSentences, "Often", new { @class = "form-check-label", @for = "inlineRadioFT3" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.FinishingTheSentences, "Always", new { @class = "form-check-input", @id = "inlineRadioFT4", @checked = (Model.FinishingTheSentences != null && Model.FinishingTheSentences == "Always") ? "checked" : null })
                                                @Html.LabelFor(model => model.FinishingTheSentences, "Always", new { @class = "form-check-label", @for = "inlineRadioFT4" })

                                            </div>
                                        </div>
                                        <div class="mb-4">
                                            <div class="d-flex align-items-center ">
                                                <p>16.</p>
                                                <h6 class="card-title ms-2">
                                                    @Html.LabelFor(model => model.DifficultyWaitingMyTurn, htmlAttributes: new { @class = "form-label" })

                                                </h6>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.DifficultyWaitingMyTurn, "", new { @class = "text-danger" })
                                        </div>

                                        <div class="mb-4">
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.DifficultyWaitingMyTurn, "Never", new { @class = "form-check-input", @id = "inlineRadioDW1", @checked = (Model.DifficultyWaitingMyTurn != null && Model.DifficultyWaitingMyTurn == "Never") ? "checked" : null })
                                                @Html.LabelFor(model => model.DifficultyWaitingMyTurn, "Never", new { @class = "form-check-label", @for = "inlineRadioDW1" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.DifficultyWaitingMyTurn, "Occasionally/Sometimes", new { @class = "form-check-input", @id = "inlineRadioDW2", @checked = (Model.DifficultyWaitingMyTurn != null && Model.DifficultyWaitingMyTurn == "Occasionally/Sometimes") ? "checked" : null })
                                                @Html.LabelFor(model => model.DifficultyWaitingMyTurn, "Occasionally/Sometimes", new { @class = "form-check-label", @for = "inlineRadioDW2" })

                                            </div>
                                            <div class="form-check form-check-inline">

                                                @Html.RadioButtonFor(model => model.DifficultyWaitingMyTurn, "Often", new { @class = "form-check-input", @id = "inlineRadioDW3", @checked = (Model.DifficultyWaitingMyTurn != null && Model.DifficultyWaitingMyTurn == "Often") ? "checked" : null })
                                                @Html.LabelFor(model => model.DifficultyWaitingMyTurn, "Often", new { @class = "form-check-label", @for = "inlineRadioDW3" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.DifficultyWaitingMyTurn, "Always", new { @class = "form-check-input", @id = "inlineRadioDW4", @checked = (Model.DifficultyWaitingMyTurn != null && Model.DifficultyWaitingMyTurn == "Always") ? "checked" : null })
                                                @Html.LabelFor(model => model.DifficultyWaitingMyTurn, "Always", new { @class = "form-check-label", @for = "inlineRadioDW4" })

                                            </div>
                                        </div>
                                        <div class="mb-4">
                                            <div class="d-flex align-items-center ">
                                                <p class="m-0">17.</p>
                                                <h6 class="card-title ms-2">
                                                    @Html.LabelFor(model => model.InterruptOtherPeople, htmlAttributes: new { @class = "form-label" })

                                                </h6>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.InterruptOtherPeople, "", new { @class = "text-danger" })
                                        </div>
                                       
                                        <div class="mb-4">
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.InterruptOtherPeople, "Never", new { @class = "form-check-input", @id = "inlineRadioIO1", @checked = (Model.InterruptOtherPeople != null && Model.InterruptOtherPeople == "Never") ? "checked" : null })
                                                @Html.LabelFor(model => model.InterruptOtherPeople, "Never", new { @class = "form-check-label", @for = "inlineRadioIO1" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.InterruptOtherPeople, "Occasionally/Sometimes", new { @class = "form-check-input", @id = "inlineRadioIO2", @checked = (Model.InterruptOtherPeople != null && Model.InterruptOtherPeople == "Occasionally/Sometimes") ? "checked" : null })
                                                @Html.LabelFor(model => model.InterruptOtherPeople, "Occasionally/Sometimes", new { @class = "form-check-label", @for = "inlineRadioIO2" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.InterruptOtherPeople, "Often", new { @class = "form-check-input", @id = "inlineRadioIO3", @checked = (Model.InterruptOtherPeople != null && Model.InterruptOtherPeople == "Often") ? "checked" : null })
                                                @Html.LabelFor(model => model.InterruptOtherPeople, "Often", new { @class = "form-check-label", @for = "inlineRadioIO3" })

                                            </div>
                                            <div class="form-check form-check-inline">
                                                @Html.RadioButtonFor(model => model.InterruptOtherPeople, "Always", new { @class = "form-check-input", @id = "inlineRadioIO4", @checked = (Model.InterruptOtherPeople != null && Model.InterruptOtherPeople == "Always") ? "checked" : null })
                                                @Html.LabelFor(model => model.InterruptOtherPeople, "Always", new { @class = "form-check-label", @for = "inlineRadioIO4" })

                                            </div>
                                        </div>
                                        <div class="mb-4">
                                            <h6 class="card-title">
                                                @*@Html.Raw("18- ")*@
                                                @Html.LabelFor(model => model.ReceiveWarningsAndPersistent, htmlAttributes: new { @class = "form-label" })
                                            </h6>
                                        </div>
                                        <div class="mb-4">
                                            @Html.DropDownListFor(model => model.ReceiveWarningsAndPersistent, new List<SelectListItem>
                                                {
                                                new SelectListItem() { Text= "No", Value = "No" },
                                                new SelectListItem() { Text= "Yes", Value = "Yes" }
                                                }, "Please select Yes/No", new { @class = "form-select" })
                                            @Html.ValidationMessageFor(model => model.ReceiveWarningsAndPersistent, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mb-4">
                                            <h6 class="card-title">
                                                @Html.LabelFor(model => model.DisciplinedOrAacked, htmlAttributes: new { @class = "form-label" })
                                            </h6>
                                        </div>
                                        <div class="mb-4">
                                            @Html.DropDownListFor(model => model.DisciplinedOrAacked, new List<SelectListItem>
                                                {
                                                new SelectListItem() { Text= "No", Value = "No" },
                                                new SelectListItem() { Text= "Yes", Value = "Yes" }
                                                }, "Please select Yes/No", new { @class = "form-select" })
                                            @Html.ValidationMessageFor(model => model.DisciplinedOrAacked, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mb-4">
                                            <h6 class="card-title">
                                                @Html.LabelFor(model => model.EverExperiencedABreakdown, htmlAttributes: new { @class = "form-label" })
                                            </h6>
                                        </div>
                                        <div class="mb-4">
                                            @Html.DropDownListFor(model => model.EverExperiencedABreakdown, new List<SelectListItem>
                                                {
                                                new SelectListItem() { Text= "No", Value = "No" },
                                                new SelectListItem() { Text= "Yes", Value = "Yes" }
                                                }, "Please select Yes/No", new { @class = "form-select" })
                                            @Html.ValidationMessageFor(model => model.EverExperiencedABreakdown, "", new { @class = "text-danger" })
                                        </div>
                                        <button id="saveBtn" type="submit" name="submit" class="btn btn-secondary p-3 w-100" value="Save_Completed">Submit</button>
                                    </div>
                                   
                                </div>
                            }
                            </div>
                        <div class="fixedActionButtons">
                            <button type="button" class="btn btn-secondary me-3" id="clearButton" onclick="clearForm('CRForm')">Clear</button>
                            <button type="button" class="btn btn-primary" id="next-tab">Next <i class="fa-solid fa-arrow-right ms-2"></i></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    
</div>
@section scripts {
    <script>
        $(document).ready(function () {
            const $playButton = $('#play-btn');
            const $continueButton = $('#introContinue');
            const $video = $('#introVideo');
            $playButton.on('click', function () {
                $video[0].play(); // Play video
            });
            $video.on('ended', function () {
                $continueButton.prop('disabled', false); // Show Continue button
            });
        });
        $(document).ready(function () {
            const $playButton2 = $('#Section02Continue');
            const $video2 = $('#introVideo2');
            $playButton2.on('click', function () {
                $video2[0].play(); // Play video
            });
        });
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script src="~/Scripts/site.js"></script>

    <script>
        $(document).ready(function () {
            // Helper function to update the active tab's text in the <h4> tag
            function updateSectionName() {
                const activeTabText = $('.nav-link.active').text().trim(); // Get the text of the active tab
                $('#sectionname').text(activeTabText); // Update the <h4> tag
            }

            // Helper function to update the navigation icons
            function updateNavigationIcons() {
                const $activeTab = $('.nav-link.active');
                const $prevTab = $activeTab.closest('li').prev('li').find('.nav-link');
                const $nextTab = $activeTab.closest('li').next('li').find('.nav-link');

                // Update "Previous" icon
                if ($prevTab.length) {
                    $('#prev-tab i').addClass('active');
                } else {
                    $('#prev-tab i').removeClass('active');
                }

                // Update "Next" icon and button
                if ($nextTab.length) {
                    $('#next-tab i').addClass('active');
                    $('#next-tab').prop('disabled', false); // Enable "Next" button
                } else {
                    $('#next-tab i').removeClass('active');
                    $('#next-tab').prop('disabled', true); // Disable "Next" button
                }
            }

            // Handle "Next" button click
            $('#next-tab').on('click', function () {
                const $activeTab = $('.nav-link.active');
                const $nextTab = $activeTab.closest('li').next('li').find('.nav-link');

                if ($nextTab.length) {
                    $activeTab.removeClass('active').attr('aria-selected', 'false');
                    $nextTab.addClass('active').attr('aria-selected', 'true');

                    const activeTabContent = $activeTab.data('bs-target');
                    const nextTabContent = $nextTab.data('bs-target');

                    $(activeTabContent).removeClass('show active');
                    $(nextTabContent).addClass('show active');

                    updateNavigationIcons(); // Update icons
                    updateSectionName(); // Update section name
                }
            });

            // Handle "Previous" link click
            $('#prev-tab').on('click', function (e) {
                e.preventDefault();
                const $activeTab = $('.nav-link.active');
                const $prevTab = $activeTab.closest('li').prev('li').find('.nav-link');

                if ($prevTab.length) {
                    $activeTab.removeClass('active').attr('aria-selected', 'false');
                    $prevTab.addClass('active').attr('aria-selected', 'true');

                    const activeTabContent = $activeTab.data('bs-target');
                    const prevTabContent = $prevTab.data('bs-target');

                    $(activeTabContent).removeClass('show active');
                    $(prevTabContent).addClass('show active');

                    updateNavigationIcons(); // Update icons
                    updateSectionName(); // Update section name
                }
            });

            // Handle "Next" link click
            $('#next-link').on('click', function (e) {
                e.preventDefault();
                const $activeTab = $('.nav-link.active');
                const $nextTab = $activeTab.closest('li').next('li').find('.nav-link');

                if ($nextTab.length) {
                    $activeTab.removeClass('active').attr('aria-selected', 'false');
                    $nextTab.addClass('active').attr('aria-selected', 'true');

                    const activeTabContent = $activeTab.data('bs-target');
                    const nextTabContent = $nextTab.data('bs-target');

                    $(activeTabContent).removeClass('show active');
                    $(nextTabContent).addClass('show active');

                    updateNavigationIcons(); // Update icons
                    updateSectionName(); // Update section name
                }
            });

            // Handle manual tab change
            $('button[data-bs-toggle="tab"]').on('shown.bs.tab', function () {
                updateNavigationIcons(); // Update icons
                updateSectionName(); // Update section name
            });

            // Initial setup
            updateNavigationIcons(); // Update icons
            updateSectionName(); // Update section name
        });


    $(document).ready(function () {
        let _flag = '@flag';
        if (_flag == 'True') {
            showall();
        }
        else {

        }
    });
        function clearForm(formId) {
            // Get the form element by ID
            const form = document.getElementById(formId);

            // Reset the form fields
            if (form) {
                form.reset();
            }

            // Clear manually populated fields, if necessary
            const inputs = form.querySelectorAll('input[type="text"], input[type="email"], textarea');
            inputs.forEach(input => {
                input.value = '';
            });

            const selects = form.querySelectorAll('select');
            selects.forEach(select => {
                select.selectedIndex = 0;
            });
        }

    $.validator.unobtrusive.adapters.add("uniqueemail", [], function (options) {
        options.rules["uniqueemail"] = true;
        options.messages["uniqueemail"] = options.message;
    });

    $.validator.addMethod("uniqueemail", function (value, element) {
        var isValid = false;
        $.ajax({
            url: '@Url.Action("IsEmailExistsAsync", "Account")',
            type: 'POST',
            dataType: 'json',
            async: false,
            data: { email: value },
            success: function (response) {
                isValid = !response.exists; // If email exists, make isValid false
            },
            error: function () {
                isValid = false; // Default to invalid on error
            }
        });
        return isValid;
    }, "Email already exists.");

    function checkEmailExists() {




        var email = document.getElementById("Email").value; // Ensure your input ID matches your model property name
        $.ajax({
            url: '@Url.Action("IsEmailExistsAsync", "Account")',
            type: 'POST',
            data: { email: email },
            success: function (response) {
                if (response.exists) {
                    // Display error message if email exists
                    $("#email-error").text("Email already exists").show();
                } else {
                    // Clear error message if email does not exist
                    $("#email-error").text("").hide();
                }
            },
            error: function () {
                $("#email-error").text("Error checking email").show();
            }
        });
    }
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.getElementById("introContinue").addEventListener("click", function () {
            document.getElementById("introduction").classList.add("d-none");
            document.getElementById("Section02").classList.remove("d-none");
        });

    </script>
    <script>
        $("#play-btn").on("click", function () {
            const video = $("#introVideo").get(0); // Get the raw DOM element
            video.play();
        });
      

    </script>



}
