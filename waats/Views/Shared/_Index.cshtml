@model waats.ViewModel.WaatsFormVM
@{
    ViewBag.Title = "Home Page";
    var flag = Model.flag;
}
<style>
    .read-only {
        pointer-events: none; /* Prevents click events */
        color: gray; /* Makes it look disabled */
        cursor: default;
    }
</style>
<div class="video-container2">
    <ul class="nav nav-pills nav-tabs mb-3 bg-light rounded p-2" id="myTab" role="tablist">
        @*<li class="nav-item" role="presentation">
            <button class="nav-link text-secondary active" id="sectionOneZero-tab" data-bs-toggle="tab"
                    type="button" role="tab"
                    aria-controls="sectionOneZero-tab-pane" aria-selected="false">
                Intro
            </button>
        </li>*@
        <li id="liSectionOneTab" class="nav-item" role="presentation">
            <button class="nav-link text-secondary active" id="sectionOne-tab" data-bs-toggle="tab"
                    type="button" role="tab"
                    aria-controls="sectionOne-tab-pane" aria-selected="false">
                Section 1
            </button>
        </li>
        <li id="liSectionTwoTab" class="nav-item read-only" role="presentation">
            <button class="nav-link text-secondary" id="sectionTwo-tab" data-bs-toggle="tab"
                    type="button" role="tab"
                    aria-controls="sectionTwo-tab-pane" aria-selected="false">
                Section 2
            </button>
        </li>
        <li id="liSectionThreeTab" class="nav-item read-only" role="presentation">
            <button class="nav-link text-secondary" id="sectionThree-tab" data-bs-toggle="tab"
                    type="button" role="tab"
                    aria-controls="sectionThree-tab-pane" aria-selected="false">
                Section 3
            </button>
        </li>

    </ul>
</div>
<div class="row">
    <div class="col-md-12">
        <div class="tab-content" id="myTabContent">
            @*<div class="tab-pane" style="display:block" id="sectionOneZero-tab-pane" role="tabpanel"
                 aria-labelledby="profile-tab" tabindex="0">
                <div class="row">
                    <div class="col-md-12">
                        <div class="video-container">
                            <div class="video-frame rounded frame-low-vh">
                                <video id="Intro1" style="width:560px;height:315px">
                                    <source src="~/Media/eng/Intro.mp4" type='video/mp4;'>
                                </video>
                                <br />
                                <i class="fa  fa-play-circle-o myHTMLvideo fw-semibold fa-1x text-dark" id="Intro" style="cursor:pointer">&nbsp;click here to play intro</i>
                            </div>
                        </div>
                        <br />
                        <br />
                        <div class="row text-center align-middle Section1Btn">
                            <div class="col-12 col-sm-12 col-md-12 col-lg-12">
                                <button id="Section0BtnID" type="button" class="btn btn-success btn-lg" name="submit">Continue</button>
                            </div>
                        </div><br />
                    </div>
                </div>
            </div>*@


            @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", id = "CRForm", @class = "form-horizontal", role = "form" }))
            {
                <div class="tab-pane" id="sectionOne-tab-pane" role="tabpanel"
                     aria-labelledby="profile-tab" tabindex="0">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="video-container m-0">
                                <div class="video-frame rounded frame-low-vh m-0">
                                    <video id="Intro1" style="width:560px;height:315px">
                                        <source src="~/Media/eng/Intro.mp4" type='video/mp4;'>
                                    </video>
                                    <i class="fa  fa-play-circle-o myHTMLvideo fw-semibold fa-1x py-4 text-light" id="Intro" style="cursor:pointer">&nbsp;click here to play intro</i>
                                </div>
                            </div>
                            <div class="row text-center align-middle Section1Btn" style="display:none">
                                <div class="col-12 col-sm-12 col-md-12 col-lg-12">
                                    <button id="Section0BtnID" type="button" class="btn btn-success btn-lg" name="submit">Continue</button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div id="divDisableFormContainer" class="form-container pb-5 disable-form mt-3">
                                <h4>Section 1</h4>
                                <div class="mb-3">
                                    @Html.LabelFor(model => model.Firstname, htmlAttributes: new { @class = "form-label" })
                                    @Html.EditorFor(model => model.Firstname, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(m => m.Firstname) } })
                                    @Html.ValidationMessageFor(model => model.Firstname, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    @Html.LabelFor(model => model.Surname, htmlAttributes: new { @class = "form-label" })
                                    @Html.EditorFor(model => model.Surname, new { htmlAttributes = new { @class = "form-select", placeholder = @Html.DisplayNameFor(m => m.Surname) } })
                                    @Html.ValidationMessageFor(model => model.Surname, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    @Html.LabelFor(model => model.DoB, htmlAttributes: new { @class = "form-label" })
                                    @Html.EditorFor(model => model.DoB, new
                               {
                                   htmlAttributes = new
                                   {
                                       @class = "form-control",
                                       //@id= "date1",
                                       @min = DateTime.Now.AddYears(-100).ToString("yyyy-MM-dd"),
                                       @max = DateTime.Now.AddDays(0).ToString("yyyy-MM-dd"),
                                       placeholder = "yyyy/mm//dd",

                                       onchange = "myFunction('DoB');"

                                   }
                               })
                                    @Html.ValidationMessageFor(model => model.DoB, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    @Html.LabelFor(model => model.Age, htmlAttributes: new { @class = "form-label" })
                                    @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @class = "form-control", maxlength = "3", placeholder = @Html.DisplayNameFor(m => m.Age), @ReadOnly = "ReadOnly" } })
                                    @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "form-label" })
                                    @Html.DropDownListFor(model => model.Gender, new List<SelectListItem> {
                                                        new SelectListItem() { Text= "Female", Value = "Female" },
                                                        new SelectListItem() { Text= "Male", Value = "Male" },
                                                        new SelectListItem() { Text= "Other", Value = "Other" }
                                                    }, "Please select", new { @class = "form-select" })
                                    @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "form-label" })
                                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(m => m.Email) } })
                                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    @Html.LabelFor(model => model.GPName, htmlAttributes: new { @class = "form-label" })
                                    @Html.EditorFor(model => model.GPName, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(m => m.GPName) } })
                                    @Html.ValidationMessageFor(model => model.GPName, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    @Html.LabelFor(model => model.PracticeName, htmlAttributes: new { @class = "form-label" })
                                    @Html.EditorFor(model => model.PracticeName, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(m => m.PracticeName) } })
                                    @Html.ValidationMessageFor(model => model.PracticeName, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "form-label" })
                                    @Html.TextAreaFor(model => model.Address, new { @class = "form-control", @rows = "3", @maxlength = "4000", placeholder = @Html.DisplayNameFor(m => m.Address) })
                                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    @Html.LabelFor(model => model.Postcode, htmlAttributes: new { @class = "form-label" })
                                    <small class="text-danger">Only accept capital letters</small>
                                    @Html.EditorFor(model => model.Postcode, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(m => m.Postcode) } })
                                    @Html.ValidationMessageFor(model => model.Postcode, "", new { @class = "text-danger" })
                                </div>
                                <button id="Section1BtnID" type="submit" class="btn btn-secondary p-3 w-100">Next</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="tab-pane" id="sectionTwo-tab-pane" role="tabpanel" style="display:none" aria-labelledby="contact-tab"
                     tabindex="0">
                    <div class="row">
                        <div class="col-md-6">

                            <div class="video-container m-0">
                                <div class="video-frame rounded frame-low-vh m-0">
                                    <video class="mycedio" id="Q3Intro-1" style="width: 560px; height: 315px; ">
                                        <source src="~/Media/eng/Q3-Intro.mp4" type='video/mp4;'>
                                    </video>
                                    <i class="fa fa-play-circle-o myHTMLvideo small fw-semibold  fa-1x py-4 text-light" style="cursor:pointer" id="Q3Intro-">&nbsp;click here to play</i>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-container pb-5 mt-3">
                                <h4>Section 2</h4>
                                <div class="mb-3">
                                    @Html.LabelFor(model => model.HistoryofMentalIllness, htmlAttributes: new { @class = "form-label" })
                                    @Html.TextAreaFor(model => model.HistoryofMentalIllness, new { @class = "form-control", @rows = "3", @maxlength = "4000", placeholder = @Html.DisplayNameFor(m => m.HistoryofMentalIllness) })
                                    @Html.ValidationMessageFor(model => model.HistoryofMentalIllness, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    @Html.LabelFor(model => model.ReferredtoMentalHealth, htmlAttributes: new { @class = "form-label" })
                                    @Html.TextAreaFor(model => model.ReferredtoMentalHealth, new { @class = "form-control", @rows = "3", @maxlength = "4000", placeholder = @Html.DisplayNameFor(m => m.HistoryofMentalIllness) })
                                    @Html.ValidationMessageFor(model => model.ReferredtoMentalHealth, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    @Html.LabelFor(model => model.HaveYouEverHadAnyThoughtsorMadeAttemptstoHarmYourself, htmlAttributes: new { @class = "form-label" })
                                    @Html.DropDownListFor(model => model.HaveYouEverHadAnyThoughtsorMadeAttemptstoHarmYourself, new List<SelectListItem> {
                                    new SelectListItem() { Text= "No", Value = "No" },
                                    new SelectListItem() { Text= "Yes", Value = "Yes" }
                                    }, "Please select Yes/No", new { @class = "form-select" })
                                    @Html.ValidationMessageFor(model => model.HaveYouEverHadAnyThoughtsorMadeAttemptstoHarmYourself, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    @Html.LabelFor(model => model.HaveYouCurrentlyorrecentlyAnyThoughtsorMadeAttemptstoHarmYourself, htmlAttributes: new { @class = "form-label" })
                                    @Html.DropDownListFor(model => model.HaveYouCurrentlyorrecentlyAnyThoughtsorMadeAttemptstoHarmYourself, new List<SelectListItem> {
                new SelectListItem() { Text= "No", Value = "No" },
                new SelectListItem() { Text= "Yes", Value = "Yes" }
            }, "Please select Yes/No", new { @class = "form-select" })
                                    @Html.ValidationMessageFor(model => model.HaveYouCurrentlyorrecentlyAnyThoughtsorMadeAttemptstoHarmYourself, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    @Html.LabelFor(model => model.HaveYouCurrentlyorrecentlyAnyThoughtsorMadeAttemptstoHarmAnyoneElse, htmlAttributes: new { @class = "form-label" })
                                    @Html.DropDownListFor(model => model.HaveYouCurrentlyorrecentlyAnyThoughtsorMadeAttemptstoHarmAnyoneElse, new List<SelectListItem> {
                                    new SelectListItem() { Text= "No", Value = "No" },
                                    new SelectListItem() { Text= "Yes", Value = "Yes" }
                                    }, "Please select Yes/No", new { @class = "form-select" })
                                    @Html.ValidationMessageFor(model => model.HaveYouCurrentlyorrecentlyAnyThoughtsorMadeAttemptstoHarmAnyoneElse, "", new { @class = "text-danger" })
                                </div>
                                <button id="section2_sub5Btn" type="button" name="submit" class="btn btn-secondary p-3 w-100">Next</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="tab-pane" id="sectionThree-tab-pane" style="display:none" role="tabpanel"
                     aria-labelledby="disabled-tab"
                     tabindex="0">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="video-container m-0">
                                <div class="video-frame rounded frame-low-vh m-0">
                                    <video class="mycedio" id="Q4Intro-1" style="width: 560px; height: 315px; ">
                                        <source src="~/Media/eng/Q4-Intro.mp4" type='video/mp4;'>
                                    </video>
                                    <i class="fa fa-play-circle-o myHTMLvideo  small fw-semibold  fa-1x py-4 text-light" style="cursor:pointer" id="Q4Intro-">&nbsp;click here to play</i>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-container pb-5 mt-3">
                                <h4>Section 3</h4>
                                <div class="mb-3">
                                    <h6 class="card-title">
                                        <span>1-</span>
                                        @Html.LabelFor(model => model.CompleteProjects, htmlAttributes: new { @class = "form-label" })
                                    </h6>
                                    @Html.ValidationMessageFor(model => model.CompleteProjects, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="CompleteProjects" id="inlineRadio1" value="Never" @(Model.CompleteProjects != null && Model.CompleteProjects == "Never" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio1">Never</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="CompleteProjects" id="inlineRadio2" value="Occasionally/Sometimes" @(Model.CompleteProjects != null && Model.CompleteProjects == "Occasionally/Sometimes" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio2">Occasionally/Sometimes</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="CompleteProjects" id="inlineRadio3" value="Often" @(Model.CompleteProjects != null && Model.CompleteProjects == "Often" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Often</label>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="radio" name="CompleteProjects" id="inlineRadio3" value="Always" @(Model.CompleteProjects != null && Model.CompleteProjects == "Always" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Always</label>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <h6 class="card-title">
                                        <span>2-</span>
                                        @Html.LabelFor(model => model.RequiresOrganization, htmlAttributes: new { @class = "form-label" })
                                    </h6>
                                    @Html.ValidationMessageFor(model => model.RequiresOrganization, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="RequiresOrganization" id="inlineRadio1" value="Never" @(Model.RequiresOrganization != null && Model.RequiresOrganization == "Never" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio1">Never</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="RequiresOrganization" id="inlineRadio2" value="Occasionally/Sometimes" @(Model.RequiresOrganization != null && Model.RequiresOrganization == "Occasionally/Sometimes" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio2">Occasionally/Sometimes</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="RequiresOrganization" id="inlineRadio3" value="Often" @(Model.RequiresOrganization != null && Model.RequiresOrganization == "Often" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Often</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="RequiresOrganization" id="inlineRadio3" value="Always" @(Model.RequiresOrganization != null && Model.RequiresOrganization == "Always" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Always</label>
                                    </div>
                                    @*<div class="row sub-Section3_2Btn">
                                        <div class="col-12 col-sm-12 col-md-12 col-lg-12">
                                            <br />
                                            <button id="sub-Section3_2Btn" type="button" class="btn btn-success" value="RequiresOrganization" name="submit">Next</button>
                                        </div>
                                    </div>*@
                                </div>
                                <div class="mb-3">
                                    <h6 class="card-title">
                                        <span>3-</span>
                                        @Html.LabelFor(model => model.keepAppointments, htmlAttributes: new { @class = "form-label" })
                                    </h6>  @Html.ValidationMessageFor(model => model.keepAppointments, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="keepAppointments" id="inlineRadio1" value="Never" @(Model.keepAppointments != null && Model.keepAppointments == "Never" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio1">Never</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="keepAppointments" id="inlineRadio2" value="Occasionally/Sometimes" @(Model.keepAppointments != null && Model.keepAppointments == "Occasionally/Sometimes" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio2">Occasionally/Sometimes</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="keepAppointments" id="inlineRadio3" value="Often" @(Model.keepAppointments != null && Model.keepAppointments == "Often" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Often</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="keepAppointments" id="inlineRadio3" value="Always" @(Model.keepAppointments != null && Model.keepAppointments == "Always" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Always</label>
                                    </div>
                                    @*<div class="row sub-Section3_3Btn">
                                        <div class="col-12 col-sm-12 col-md-12 col-lg-12">
                                            <br />
                                            <button id="sub-Section3_3Btn" type="button" class="btn btn-success" value="keepAppointments" name="submit">Next</button>
                                        </div>
                                    </div>*@
                                </div>
                                <div class="mb-3">
                                    <h6 class="card-title">
                                        <span>4-</span>
                                        @Html.LabelFor(model => model.StartTasksOnTime, htmlAttributes: new { @class = "form-label" })
                                    </h6>
                                    @Html.ValidationMessageFor(model => model.StartTasksOnTime, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="StartTasksOnTime" id="inlineRadio1" value="Never" @(Model.StartTasksOnTime != null && Model.StartTasksOnTime == "Never" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio1">Never</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="StartTasksOnTime" id="inlineRadio2" value="Occasionally/Sometimes" @(Model.StartTasksOnTime != null && Model.StartTasksOnTime == "Occasionally/Sometimes" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio2">Occasionally/Sometimes</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="StartTasksOnTime" id="inlineRadio3" value="Often" @(Model.StartTasksOnTime != null && Model.StartTasksOnTime == "Often" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Often</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="StartTasksOnTime" id="inlineRadio3" value="Always" @(Model.StartTasksOnTime != null && Model.StartTasksOnTime == "Always" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Always</label>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <h6 class="card-title">
                                        <span>5-</span>
                                        @Html.LabelFor(model => model.FidgetAndSquirm, htmlAttributes: new { @class = "form-label" })
                                    </h6>  @Html.ValidationMessageFor(model => model.FidgetAndSquirm, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="FidgetAndSquirm" id="inlineRadio1" value="Never" @(Model.FidgetAndSquirm != null && Model.FidgetAndSquirm == "Never" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio1">Never</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="FidgetAndSquirm" id="inlineRadio2" value="Occasionally/Sometimes" @(Model.FidgetAndSquirm != null && Model.FidgetAndSquirm == "Occasionally/Sometimes" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio2">Occasionally/Sometimes</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="FidgetAndSquirm" id="inlineRadio3" value="Often" @(Model.FidgetAndSquirm != null && Model.FidgetAndSquirm == "Often" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Often</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="FidgetAndSquirm" id="inlineRadio3" value="Always" @(Model.FidgetAndSquirm != null && Model.FidgetAndSquirm == "Always" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Always</label>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <h6 class="card-title">
                                        <span>6-</span>
                                        @Html.LabelFor(model => model.OverlyActiveAndCompelled, htmlAttributes: new { @class = "form-label" })
                                    </h6>   @Html.ValidationMessageFor(model => model.OverlyActiveAndCompelled, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="OverlyActiveAndCompelled" id="inlineRadio1" value="Never" @(Model.OverlyActiveAndCompelled != null && Model.OverlyActiveAndCompelled == "Never" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio1">Never</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="OverlyActiveAndCompelled" id="inlineRadio2" value="Occasionally/Sometimes" @(Model.OverlyActiveAndCompelled != null && Model.OverlyActiveAndCompelled == "Occasionally/Sometimes" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio2">Occasionally/Sometimes</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="OverlyActiveAndCompelled" id="inlineRadio3" value="Often" @(Model.OverlyActiveAndCompelled != null && Model.OverlyActiveAndCompelled == "Often" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Often</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="OverlyActiveAndCompelled" id="inlineRadio3" value="Always" @(Model.OverlyActiveAndCompelled != null && Model.OverlyActiveAndCompelled == "Always" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Always</label>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <h6 class="card-title">
                                        <span>7-</span>
                                        @Html.LabelFor(model => model.MakeCarelessMistakes, htmlAttributes: new { @class = "form-label" })
                                    </h6>   @Html.ValidationMessageFor(model => model.MakeCarelessMistakes, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="MakeCarelessMistakes" id="inlineRadio1" value="Never" @(Model.MakeCarelessMistakes != null && Model.MakeCarelessMistakes == "Never" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio1">Never</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="MakeCarelessMistakes" id="inlineRadio2" value="Occasionally/Sometimes" @(Model.MakeCarelessMistakes != null && Model.MakeCarelessMistakes == "Occasionally/Sometimes" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio2">Occasionally/Sometimes</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="MakeCarelessMistakes" id="inlineRadio3" value="Often" @(Model.MakeCarelessMistakes != null && Model.MakeCarelessMistakes == "Often" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Often</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="MakeCarelessMistakes" id="inlineRadio3" value="Always" @(Model.MakeCarelessMistakes != null && Model.MakeCarelessMistakes == "Always" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Always</label>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <h6 class="card-title">
                                        <span>8-</span>
                                        @Html.LabelFor(model => model.DifficultyKeepingMyAttention, htmlAttributes: new { @class = "form-label" })
                                    </h6>    @Html.ValidationMessageFor(model => model.DifficultyKeepingMyAttention, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="DifficultyKeepingMyAttention" id="inlineRadio1" value="Never" @(Model.DifficultyKeepingMyAttention != null && Model.DifficultyKeepingMyAttention == "Never" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio1">Never</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="DifficultyKeepingMyAttention" id="inlineRadio2" value="Occasionally/Sometimes" @(Model.DifficultyKeepingMyAttention != null && Model.DifficultyKeepingMyAttention == "Occasionally/Sometimes" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio2">Occasionally/Sometimes</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="DifficultyKeepingMyAttention" id="inlineRadio3" value="Often" @(Model.DifficultyKeepingMyAttention != null && Model.DifficultyKeepingMyAttention == "Often" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Often</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="DifficultyKeepingMyAttention" id="inlineRadio3" value="Always" @(Model.DifficultyKeepingMyAttention != null && Model.DifficultyKeepingMyAttention == "Always" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Always</label>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <h6 class="card-title">
                                        <span>9-</span>
                                        @Html.LabelFor(model => model.DifficultyConcentrating, htmlAttributes: new { @class = "form-label" })
                                    </h6>  @Html.ValidationMessageFor(model => model.DifficultyConcentrating, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="DifficultyConcentrating" id="inlineRadio1" value="Never" @(Model.DifficultyConcentrating != null && Model.DifficultyConcentrating == "Never" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio1">Never</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="DifficultyConcentrating" id="inlineRadio2" value="Occasionally/Sometimes" @(Model.DifficultyConcentrating != null && Model.DifficultyConcentrating == "Occasionally/Sometimes" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio2">Occasionally/Sometimes</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="DifficultyConcentrating" id="inlineRadio3" value="Often" @(Model.DifficultyConcentrating != null && Model.DifficultyConcentrating == "Often" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Often</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="DifficultyConcentrating" id="inlineRadio3" value="Always" @(Model.DifficultyConcentrating != null && Model.DifficultyConcentrating == "Always" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Always</label>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <h6 class="card-title">
                                        <span>10-</span>
                                        @Html.LabelFor(model => model.DifficultyFinding, htmlAttributes: new { @class = "form-label" })
                                    </h6>   @Html.ValidationMessageFor(model => model.DifficultyFinding, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="DifficultyFinding" id="inlineRadio1" value="Never" @(Model.DifficultyFinding != null && Model.DifficultyFinding == "Never" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio1">Never</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="DifficultyFinding" id="inlineRadio2" value="Occasionally/Sometimes" @(Model.DifficultyFinding != null && Model.DifficultyFinding == "Occasionally/Sometimes" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio2">Occasionally/Sometimes</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="DifficultyFinding" id="inlineRadio3" value="Often" @(Model.DifficultyFinding != null && Model.DifficultyFinding == "Often" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Often</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="DifficultyFinding" id="inlineRadio3" value="Always" @(Model.DifficultyFinding != null && Model.DifficultyFinding == "Always" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Always</label>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <h6 class="card-title">
                                        <span>11-</span>
                                        @Html.LabelFor(model => model.EasilyDistracted, htmlAttributes: new { @class = "form-label" })
                                    </h6>   @Html.ValidationMessageFor(model => model.EasilyDistracted, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="EasilyDistracted" id="inlineRadio1" value="Never" @(Model.EasilyDistracted != null && Model.EasilyDistracted == "Never" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio1">Never</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="EasilyDistracted" id="inlineRadio2" value="Occasionally/Sometimes" @(Model.EasilyDistracted != null && Model.EasilyDistracted == "Occasionally/Sometimes" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio2">Occasionally/Sometimes</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="EasilyDistracted" id="inlineRadio3" value="Often" @(Model.EasilyDistracted != null && Model.EasilyDistracted == "Often" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Often</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="EasilyDistracted" id="inlineRadio3" value="Always" @(Model.EasilyDistracted != null && Model.EasilyDistracted == "Always" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Always</label>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <h6 class="card-title">
                                        <span>12-</span>
                                        @Html.LabelFor(model => model.LeaveMySeatInMeetings, htmlAttributes: new { @class = "form-label" })
                                    </h6>  @Html.ValidationMessageFor(model => model.LeaveMySeatInMeetings, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="LeaveMySeatInMeetings" id="inlineRadio1" value="Never" @(Model.LeaveMySeatInMeetings != null && Model.LeaveMySeatInMeetings == "Never" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio1">Never</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="LeaveMySeatInMeetings" id="inlineRadio2" value="Occasionally/Sometimes" @(Model.LeaveMySeatInMeetings != null && Model.LeaveMySeatInMeetings == "Occasionally/Sometimes" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio2">Occasionally/Sometimes</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="LeaveMySeatInMeetings" id="inlineRadio3" value="Often" @(Model.LeaveMySeatInMeetings != null && Model.LeaveMySeatInMeetings == "Often" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Often</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="LeaveMySeatInMeetings" id="inlineRadio3" value="Always" @(Model.LeaveMySeatInMeetings != null && Model.LeaveMySeatInMeetings == "Always" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Always</label>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <h6 class="card-title">
                                        <span>13-</span>
                                        @Html.LabelFor(model => model.DifficultyRelaxingOrUnwinding, htmlAttributes: new { @class = "form-label" })
                                    </h6>  @Html.ValidationMessageFor(model => model.DifficultyRelaxingOrUnwinding, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="DifficultyRelaxingOrUnwinding" id="inlineRadio1" value="Never" @(Model.DifficultyRelaxingOrUnwinding != null && Model.DifficultyRelaxingOrUnwinding == "Never" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio1">Never</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="DifficultyRelaxingOrUnwinding" id="inlineRadio2" value="Occasionally/Sometimes" @(Model.DifficultyRelaxingOrUnwinding != null && Model.DifficultyRelaxingOrUnwinding == "Occasionally/Sometimes" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio2">Occasionally/Sometimes</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="DifficultyRelaxingOrUnwinding" id="inlineRadio3" value="Often" @(Model.DifficultyRelaxingOrUnwinding != null && Model.DifficultyRelaxingOrUnwinding == "Often" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Often</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="DifficultyRelaxingOrUnwinding" id="inlineRadio3" value="Always" @(Model.DifficultyRelaxingOrUnwinding != null && Model.DifficultyRelaxingOrUnwinding == "Always" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Always</label>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <h6 class="card-title">
                                        <span>14-</span>
                                        @Html.LabelFor(model => model.TalkingTooMuch, htmlAttributes: new { @class = "form-label" })
                                    </h6>  @Html.ValidationMessageFor(model => model.TalkingTooMuch, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="TalkingTooMuch" id="inlineRadio1" value="Never" @(Model.TalkingTooMuch != null && Model.TalkingTooMuch == "Never" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio1">Never</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="TalkingTooMuch" id="inlineRadio2" value="Occasionally/Sometimes" @(Model.TalkingTooMuch != null && Model.TalkingTooMuch == "Occasionally/Sometimes" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio2">Occasionally/Sometimes</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="TalkingTooMuch" id="inlineRadio3" value="Often" @(Model.TalkingTooMuch != null && Model.TalkingTooMuch == "Often" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Often</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="TalkingTooMuch" id="inlineRadio3" value="Always" @(Model.TalkingTooMuch != null && Model.TalkingTooMuch == "Always" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Always</label>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <h6 class="card-title">
                                        <span>15-</span>
                                        @Html.LabelFor(model => model.FinishingTheSentences, htmlAttributes: new { @class = "form-label" })
                                    </h6>  @Html.ValidationMessageFor(model => model.FinishingTheSentences, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="FinishingTheSentences" id="inlineRadio1" value="Never" @(Model.FinishingTheSentences != null && Model.FinishingTheSentences == "Never" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio1">Never</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="FinishingTheSentences" id="inlineRadio2" value="Occasionally/Sometimes" @(Model.FinishingTheSentences != null && Model.FinishingTheSentences == "Occasionally/Sometimes" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio2">Occasionally/Sometimes</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="FinishingTheSentences" id="inlineRadio3" value="Often" @(Model.FinishingTheSentences != null && Model.FinishingTheSentences == "Often" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Often</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="FinishingTheSentences" id="inlineRadio3" value="Always" @(Model.FinishingTheSentences != null && Model.FinishingTheSentences == "Always" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Always</label>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <h6 class="card-title">
                                        <span>16-</span>
                                        @Html.LabelFor(model => model.DifficultyWaitingMyTurn, htmlAttributes: new { @class = "form-label" })
                                    </h6>  @Html.ValidationMessageFor(model => model.DifficultyWaitingMyTurn, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="DifficultyWaitingMyTurn" id="inlineRadio1" value="Never" @(Model.DifficultyWaitingMyTurn != null && Model.DifficultyWaitingMyTurn == "Never" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio1">Never</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="DifficultyWaitingMyTurn" id="inlineRadio2" value="Occasionally/Sometimes" @(Model.DifficultyWaitingMyTurn != null && Model.DifficultyWaitingMyTurn == "Occasionally/Sometimes" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio2">Occasionally/Sometimes</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="DifficultyWaitingMyTurn" id="inlineRadio3" value="Often" @(Model.DifficultyWaitingMyTurn != null && Model.DifficultyWaitingMyTurn == "Often" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Often</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="DifficultyWaitingMyTurn" id="inlineRadio3" value="Always" @(Model.DifficultyWaitingMyTurn != null && Model.DifficultyWaitingMyTurn == "Always" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Always</label>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <h6 class="card-title">
                                        <span>17-</span>
                                        @Html.LabelFor(model => model.InterruptOtherPeople, htmlAttributes: new { @class = "form-label" })
                                    </h6>
                                    @Html.ValidationMessageFor(model => model.InterruptOtherPeople, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="InterruptOtherPeople" id="inlineRadio1" value="Never" @(Model.InterruptOtherPeople != null && Model.InterruptOtherPeople == "Never" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio1">Never</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="InterruptOtherPeople" id="inlineRadio2" value="Occasionally/Sometimes" @(Model.InterruptOtherPeople != null && Model.InterruptOtherPeople == "Occasionally/Sometimes" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio2">Occasionally/Sometimes</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="InterruptOtherPeople" id="inlineRadio3" value="Often" @(Model.InterruptOtherPeople != null && Model.InterruptOtherPeople == "Often" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Often</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="InterruptOtherPeople" id="inlineRadio3" value="Always" @(Model.InterruptOtherPeople != null && Model.InterruptOtherPeople == "Always" ? new { @checked = "checked" } : null)>
                                        <label class="form-check-label" for="inlineRadio3">Always</label>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <h6 class="card-title">
                                        @Html.Raw("18- ") @Html.LabelFor(model => model.ReceiveWarningsAndPersistent, htmlAttributes: new { @class = "form-label" })
                                    </h6>
                                </div>
                                <div class="mb-3">
                                    @Html.DropDownListFor(model => model.ReceiveWarningsAndPersistent, new List<SelectListItem> {
                                        new SelectListItem() { Text= "No", Value = "No" },
                                        new SelectListItem() { Text= "Yes", Value = "Yes" }
                                    }, "Please select Yes/No", new { @class = "form-select" })
                                    @Html.ValidationMessageFor(model => model.ReceiveWarningsAndPersistent, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    <h6 class="card-title">
                                        @Html.LabelFor(model => model.DisciplinedOrAacked, htmlAttributes: new { @class = "form-label" })
                                    </h6>
                                </div>
                                <div class="mb-3">
                                    @Html.DropDownListFor(model => model.DisciplinedOrAacked, new List<SelectListItem> {
                                        new SelectListItem() { Text= "No", Value = "No" },
                                        new SelectListItem() { Text= "Yes", Value = "Yes" }
                                    }, "Please select Yes/No", new { @class = "form-select" })
                                    @Html.ValidationMessageFor(model => model.DisciplinedOrAacked, "", new { @class = "text-danger" })
                                </div>
                                <div class="mb-3">
                                    <h6 class="card-title">
                                        @Html.LabelFor(model => model.EverExperiencedABreakdown, htmlAttributes: new { @class = "form-label" })
                                    </h6>
                                </div>
                                <div class="mb-3">
                                    @Html.DropDownListFor(model => model.EverExperiencedABreakdown, new List<SelectListItem> {
                                        new SelectListItem() { Text= "No", Value = "No" },
                                        new SelectListItem() { Text= "Yes", Value = "Yes" }
                                    }, "Please select Yes/No", new { @class = "form-select" })
                                    @Html.ValidationMessageFor(model => model.EverExperiencedABreakdown, "", new { @class = "text-danger" })
                                </div>
                                <button id="saveBtn" type="submit" name="submit" class="btn btn-secondary p-3 w-100" value="Save_Completed">Submit</button>
                            </div>
                        </div>
                    </div>

                </div>
            }
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<!-- jQuery Validate -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
<!-- jQuery Validate Unobtrusive -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>

@section scripts {
    <script src="~/Scripts/site.js"></script>
    <script>
        $(document).ready(function () {


            // Adding an event listener to format the date when the user selects a date
            document.getElementById('date1').addEventListener('change', function () {
                const date = new Date(this.value); // Get the selected date
                const formattedDate = date.getFullYear() + '-' +
                    String(date.getMonth() + 1).padStart(2, '0') + '-' +
                    String(date.getDate()).padStart(2, '0'); // Format as YYYY-MM-DD
                console.log("Formatted Date:", formattedDate); // Logs the date in YYYY-MM-DD format
                // You can now use formattedDate as needed
            });


            let _flag = '@flag';
            if (_flag == 'True') {
                showall();
            }
            else {

            }
        });

         $.validator.unobtrusive.adapters.add("uniqueemail", [], function (options) {
             options.rules["uniqueemail"] = true;
             options.messages["uniqueemail"] = options.message;
         });

         $.validator.addMethod("uniqueemail", function (value, element) {
             var isValid = false;
             $.ajax({
                 url: '@Url.Action("IsEmailExistsAsync", "Account")',
                 type: 'POST',
                 dataType: 'json',
                 async: false,
                 data: { email: value },
                 success: function (response) {
                     isValid = !response.exists; // If email exists, make isValid false
                 },
                 error: function () {
                     isValid = false; // Default to invalid on error
                 }
             });
             return isValid;
         }, "Email already exists.");

        function checkEmailExists() {




    var email = document.getElementById("Email").value; // Ensure your input ID matches your model property name
    $.ajax({
        url: '@Url.Action("IsEmailExistsAsync", "Account")',
        type: 'POST',
        data: { email: email },
        success: function(response) {
            if (response.exists) {
                // Display error message if email exists
                $("#email-error").text("Email already exists").show();
            } else {
                // Clear error message if email does not exist
                $("#email-error").text("").hide();
            }
        },
        error: function() {
            $("#email-error").text("Error checking email").show();
        }
    });
}
    </script>

}
